// Generated by CoffeeScript 1.8.0
(function() {
  var module;

  module = angular.module("commons.catalog.controllers", ['commons.catalog.services', 'commons.base.controllers', 'commons.base.services']);

  module.controller("ProjectSheetListCtrl", function($scope, $controller, ProjectSheet, $timeout) {
    "Controller that extends AbstractListCtrl with ProjectSheet search";
    angular.extend(this, $controller('AbstractListCtrl', {
      $scope: $scope
    }));
    console.log(" Init Project List Controller", $scope.params);
    return $scope.refreshList = function() {
      console.log(" refreshing Project List", $scope.params);
      return ProjectSheet.one().customGETLIST('search', $scope.params).then(function(result) {
        console.log(" Refreshed ! ", result);
        if (result.length > 0) {
          $scope.projectsheets = result;
        } else {
          $scope.projectsheets = [];
        }
        $scope.resultTotalCount = result.metadata.total_count;
        if (result.metadata.next) {
          $scope.seeMore = true;
          $scope.nextURL = result.metadata.next.slice(1);
        } else {
          $scope.seeMore = false;
        }
        return $timeout(function() {
          return $scope.$broadcast('projectListRefreshed');
        }, 10);
      });
    };
  });

  module.controller("ProjectSheetCtrl", function($scope, $stateParams, $filter, ProjectSheet, Project, ProjectSheetQuestionAnswer, Bucket, $http, FileUploader, $modal) {
    this.$http = $http;
    $scope.init = function() {
      return console.log(" INit ProjectSheetCtrl ");
    };
    $scope.updateProjectSheet = function(resourceName, resourceId, fieldName, data) {
      var putData;
      putData = {};
      putData[fieldName] = data;
      switch (resourceName) {
        case 'Project':
          return Project.one(resourceId).patch(putData);
        case 'ProjectSheetQuestionAnswer':
          return ProjectSheetQuestionAnswer.one(resourceId).patch(putData);
        case 'ProjectSheet':
          return ProjectSheet.one(resourceId).patch(putData);
      }
    };
    return $scope.openGallery = function(projectsheet) {
      var modalInstance;
      return modalInstance = $modal.open({
        templateUrl: 'views/catalog/block/gallery.html',
        controller: 'GalleryInstanceCtrl',
        size: 'lg',
        resolve: {
          params: function() {
            return {
              projectsheet: projectsheet
            };
          }
        }
      });
    };
  });

  module.controller("ProjectSheetCreateCtrl", function($rootScope, $scope, ProjectSheet, Project, PostalAddress, ProjectSheetTemplate, ProjectSheetQuestionAnswer, $http, FileUploader, $modal, ObjectProfileLink) {
    this.$http = $http;
    $scope.uploader = new FileUploader({
      url: config.bucket_uri,
      headers: {
        Authorization: this.$http.defaults.headers.common.Authorization
      }
    });
    $scope.favorite = "-1";
    $scope.videos = {};
    $scope.init = function(templateSlug) {
      console.log("Init Create controller ! ", templateSlug);
      $scope.projectsheet = {};
      $scope.QAItems = [];
      return ProjectSheetTemplate.one().get({
        'slug': templateSlug
      }).then(function(templateResult) {
        var template;
        template = templateResult.objects[0];
        angular.forEach(template.questions, function(question) {
          return $scope.QAItems.push({
            questionLabel: question.text,
            question: question.resource_uri,
            answer: "",
            choices: question.choices
          });
        });
        console.log("Q_A_item", $scope.QAItems);
        return $scope.projectsheet.template = template.resource_uri;
      });
    };
    $scope.saveProject = function() {
      console.log("saving project ..");
      if ($scope.projectsheet.project.begin_date === void 0) {
        $scope.projectsheet.project.begin_date = new Date();
      }
      $scope.projectsheet.project.slug = slug($scope.projectsheet.project.title);
      return ProjectSheet.post($scope.projectsheet).then(function(projectsheetResult) {
        angular.forEach($scope.QAItems, function(q_a) {
          q_a.projectsheet = projectsheetResult.resource_uri;
          q_a.projectsheet_id = projectsheetResult.id;
          console.log("current QA_item", q_a);
          return ProjectSheetQuestionAnswer.post(q_a);
        });
        return projectsheetResult;
      });
    };
    $scope.savePhotos = function(projectsheetID, bucketID) {
      angular.forEach($scope.uploader.queue, function(item) {
        item.formData.push({
          bucket: bucketID
        });
        return item.headers = {
          Authorization: $scope.uploader.headers["Authorization"]
        };
      });
      $scope.uploader.uploadAll();
      return $scope.uploader.onCompleteItem = function(fileItem, response, status, headers) {
        if ($scope.uploader.getIndexOfItem(fileItem) === $scope.favorite) {
          return ProjectSheet.one(projectsheetID).patch({
            cover: response.resource_uri
          });
        }
      };
    };
    $scope.saveVideos = function(projectsheetID) {
      return ProjectSheet.one(projectsheetID).patch({
        videos: $scope.videos
      });
    };
    return $scope.openGallery = function() {
      var modalInstance;
      modalInstance = $modal.open({
        templateUrl: 'views/catalog/block/gallery.html',
        controller: 'GalleryInstanceCtrl',
        size: 'lg',
        resolve: {
          params: function() {
            return {
              uploader: $scope.uploader,
              videos: $scope.videos,
              favorite: $scope.favorite
            };
          }
        }
      });
      return modalInstance.result.then(function(result) {
        return $scope.favorite = result.favorite;
      }, function() {});
    };
  });

  module.controller('GalleryInstanceCtrl', function($scope, $rootScope, $modalInstance, $http, params, FileUploader, ProjectSheet, BucketFile) {
    this.$http = $http;
    console.log('Init GalleryInstanceCtrl', params);
    if (!$rootScope.authVars.isAuthenticated) {
      $rootScope.forceLogin();
    }
    if (params.projectsheet) {
      $scope.uploader = new FileUploader({
        url: config.bucket_uri,
        headers: {
          Authorization: this.$http.defaults.headers.common.Authorization
        }
      });
      $scope.bucket = params.projectsheet.bucket;
      $scope.projectsheet = params.projectsheet;
      $scope.videos = params.projectsheet.videos ? params.projectsheet.videos : {};
      $scope.uploader.onAfterAddingFile = function(item) {
        item.formData.push({
          bucket: $scope.bucket.id
        });
        item.headers = {
          Authorization: $scope.uploader.headers["Authorization"]
        };
        return item.upload();
      };
      $scope.uploader.onCompleteItem = function(fileItem, response, status, headers) {
        $scope.uploader.removeFromQueue(fileItem);
        $scope.bucket.files.push(response);
        if ($scope.bucket.files.length === 1) {
          return $scope.updateFavorite(response);
        }
      };
    } else {
      $scope.uploader = params.uploader;
      $scope.videos = params.videos;
      $scope.favorite = params.favorite;
      $scope.cover = null;
      $scope.uploader.onAfterAddingFile = function(item) {
        if ($scope.uploader.queue.length === 1) {
          return $scope.setFavorite(item);
        }
      };
    }
    $scope.ok = function() {
      var result;
      result = {
        uploader: $scope.uploader,
        videos: $scope.videos,
        favorite: $scope.favorite
      };
      return $modalInstance.close(result);
    };
    $scope.cancel = function() {
      return $modalInstance.dismiss('cancel');
    };
    $scope.addVideo = function(newVideosURL) {
      $scope.videos[newVideosURL] = null;
      if ($scope.projectsheet) {
        return ProjectSheet.one($scope.projectsheet.id).patch({
          videos: $scope.videos
        });
      }
    };
    $scope.delVideo = function(videosURL) {
      delete $scope.videos[videosURL];
      if ($scope.projectsheet) {
        return ProjectSheet.one($scope.projectsheet.id).patch({
          videos: $scope.videos
        });
      }
    };
    $scope.setFavorite = function(file) {
      $scope.cover = file;
      return $scope.favorite = $scope.uploader.getIndexOfItem(file);
    };
    $scope.removePicture = function(file) {
      var fileIndex;
      fileIndex = $scope.bucket.files.indexOf(file);
      $scope.bucket.files.splice(fileIndex, 1);
      return BucketFile.one(file.id).remove();
    };
    return $scope.updateFavorite = function(file) {
      $scope.projectsheet.cover = file;
      return ProjectSheet.one($scope.projectsheet.id).patch({
        cover: file.resource_uri
      });
    };
  });

  module.controller("ProjectProgressCtrl", function($scope, Project, ProjectProgress) {
    $scope.progressRange = [];
    $scope.selectedClasses = {};
    $scope.updateProgressChoice = function(progressChoice) {
      $scope.selectedClasses = {};
      return $scope.selectedClasses[progressChoice.id] = "selected";
    };
    return $scope.init = function(projectID, projectProgressRangeSlug) {
      return ProjectProgress.getList({
        'range__slug': projectProgressRangeSlug
      }).then(function(progressRangeResult) {
        $scope.progressRange = progressRangeResult;
        return $scope.updateProgressChoice($scope.progressRange[0]);
      });
    };
  });

}).call(this);
